names(aggdata)[2]<-"vs"
View(aggdata)
View(mtcars)
aggregate(mtcars$carb, by=list(cyl))
aggregate(mtcars$carb, by=list(cyl), FUN=sum)
aggregate(mtcars$carb, by=list(cyl=cyl), FUN=mean)
aggregate(x=mtcars$carb, by=list(cyl=cyl), FUN=mean)
aggregate(mean=mtcars$carb, by=list(cyl=cyl), FUN=mean)
View(aggdata)
?survfit
library(survival)
data(ovarian)
View(ovarian)
?ovarian
S1 <- Surv(ovarian$futime, ovarian$fustat)
S1
fit1 <- survfit(S1)
S1 = Surv(ovarian$futime, ovarian$fustat)
fit1 <- survfit(S1)
survfit(Surv(ovarian$futime, ovarian$fustat))
survfit(Surv(ovarian$futime, ovarian$fustat)~1)
fit1 <- survfit(Surv(ovarian$futime, ovarian$fustat)~1)
plot(fit1)
summary(fit1)
s2=survreg(Surv(futime, fustat)~1 , data=ovarian, dist=’exponential’)
s2=survreg(Surv(futime, fustat)~1 , data=ovarian, dist='exponential'')
s2=survreg(Surv(futime, fustat)~1 , data=ovarian, dist='exponential')
plot(s2)
summary(s2)
plot(T,1-pexp(T,exp(-7.169)),xlab="t",ylab=expression(hat(S)*"(t)"))
?pexp
T
T <- seq(0,1200)
plot(T,1-pexp(T,exp(-7.169)),xlab="t",ylab=expression(hat(S)*"(t)"))
?plot
plot(T,1-pexp(T,exp(-7.169)),xlab="t",ylab=expression(hat(S)*"(t)"), type=l)
plot(T,1-pexp(T,exp(-7.169)),xlab="t",ylab=expression(hat(S)*"(t)"), type='l')
s1=survreg(Surv(futime, fustat)~1 , ovarian, dist='weibull',scale=0)
summary(s1)
plot(T,1-pweibull(T,1/0.902,exp(7.111)))
library(survival)
data(aml)
makeVector(c(1,2,3))
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
makeVector(c(1,2,3))
x <- makeVector(1,2,3)
x <- makeVector(c(1,2,3)
)
x$set
x$get
x$x
x$set(c(1,2,3))
x$x
x$get
x$get()
y<-makeVector(c(1,2,3))
y$get
y$get()
y$getmean()
y$setmean(3)
y$getmean()
?'<<-'
source('~/.active-rstudio-document')
m = matrix(rand(10),c(2,3))
m = matrix(runif(10),c(2,3))
m
m = matrix(runif(6),c(2,3))
m
M <- makeCacheMatrix(m)
M
M$get
v <- makeVector(c(1,2,3))
v
v$get()
M$get()
M$set(matrix(1:6, c(2,3)))
M$get
M$get()
source('~/.active-rstudio-document')
M <- makeCacheMatrix(m)
M$get()
M
source('~/.active-rstudio-document')
M <- makeCacheMatrix(m)
M$get
M$get()
M$x
M
?solve
x = matrix(c(1,0,1,0), c(2,2))
x
x = matrix(c(1,0,0,1), c(2,2))
x
solve(x)
x <- makeCacheMatrix(x)
x
source('~/.active-rstudio-document')
rm(list=ls())
x = matrix(c(1,0,0,1),c(2,2))
source('~/.active-rstudio-document')
x <- makeCacheMatrix(x)
cacheSolve(x)
cacheSolve(x)
mat
x
x$get()
x$get()
x
x$get()
x$set(1)
x$get()
source('~/.active-rstudio-document')
rm(list=ls())
source('~/.active-rstudio-document')
x = matrix(runif(4),c(2,2))
x = makeCacheMatrix(x)
x$get()
x$set
cacheSolve(x)
cacheSolve(x)
x$getinverse()
rm(list=ls())
source('~/.active-rstudio-document')
x = matrix(runif(4), c(2,2))
x <- makeCacheMatrix(x)
cacheSolve(x)
cacheSolve(x)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
cacheSolve(x)
cacheSolve(x)
x$set(matrix(1,2,3,4), c(2,2))
x$set(matrix(c(1,2,3,4), c(2,2)))
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
install.packages("swirl")
library(swirl)
?
help()
rm(list=ls())
swirl()
5+7
x <- 5 + 7
x
y <- x - 3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(555,z,555)
c(z,555,z)
z * 2 + 100
mySqrt <- sqrt(z-1)
mySqrt
myDiv <- z / mySqrt
myDiv
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
q()
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
airquality <- transform(airquality, Month=factor(Month))
boxpl(Ozone ~ Month , airquality)
boxplot(Ozone ~ Month , airquality)
colors()
lty()
?par
par("col")
par("mfrow")
par("mfcol")
par("pch")
pch()
?par
?gl
x11()
windows()
quarts()
quartz()
?Devices
pdf()
x < -rand(100)
y = rand(100)
x = rnorm(100)
y = rnorm(100)
plot(x,y)
windows()
plot(x,y)
dev.off()
dev.off()
dev.off()
rm(list=ls())
read.table("C:\Users\Ognjen\Documents\Coursera\Exploratory Data Analysis\exdata-data-household_power_consumption\household_power_consumption.txt")
consumption <- read.table("C:\\Users\\Ognjen\\Documents\\Coursera\Exploratory Data Analysis\\exdata-data-household_power_consumption\\household_power_consumption.txt")
consumption <- read.table("C:\\Users\\Ognjen\\Documents\\Coursera\\Exploratory Data Analysis\\exdata-data-household_power_consumption\\household_power_consumption.txt")
View(consumption)
?read.table
consumption <- read.table("C:\\Users\\Ognjen\\Documents\\Coursera\\Exploratory Data Analysis\\exdata-data-household_power_consumption\\household_power_consumption.txt", header = TRUE, sep = ";", na.strings = "?")
View(consumption)
class(consumption)
str(consumption)
sub <- consumption[1:5,]
sub
as.Date(sub$Date)
as.Date(sub$Date, format="%d/%m/%Y")
consumption$Date <- as.Date(consumption$Date, format = "%d/%m/%Y")
?strptime
strptime(sub$Time,format="%H:%M:%S")
sub$Date
strptime(sub$Date + " " + sub$Time, format = "%d/%m/%Y %H:%M:%S")
strptime(sub$Time, format = '%H:%M:%S")
strptime(sub$Time, format = "%H:%M:%S")
dataFile = "C:\\Users\\Ognjen\\Documents\\Coursera\\Exploratory Data Analysis\\exdata-data-household_power_consumption\\household_power_consumption.txt";
x = "string"
class(x)
class(4)
rm(list= ls())
dataFile = "C:\\Users\\Ognjen\\Documents\\Coursera\\Exploratory Data Analysis\\exdata-data-household_power_consumption\\household_power_consumption.txt";
consumption <- read.table(dataFile,
header = TRUE,
sep = ";",
na.strings = "?",
colClassess = c("character", "character", "numeric", "numeric","numeric","numeric","numeric","numeric","numeric")
dataFile = "C:\\Users\\Ognjen\\Documents\\Coursera\\Exploratory Data Analysis\\exdata-data-household_power_consumption\\household_power_consumption.txt";
consumption <- read.table(dataFile,
header = TRUE,
sep = ";",
na.strings = "?",
colClassess = c("character", "character", "numeric", "numeric","numeric","numeric","numeric","numeric","numeric"))
rep("character",2)
c(rep("character",2), rep("numeric",7))
dataFile = "C:\\Users\\Ognjen\\Documents\\Coursera\\Exploratory Data Analysis\\exdata-data-household_power_consumption\\household_power_consumption.txt";
consumption <- read.table(dataFile,
header = TRUE,
sep = ";",
na.strings = "?",
colClassess = c(rep("character",2), rep("numeric",7)))
?read.table
dataFile = "C:\\Users\\Ognjen\\Documents\\Coursera\\Exploratory Data Analysis\\exdata-data-household_power_consumption\\household_power_consumption.txt";
consumption <- read.table(dataFile,
header = TRUE,
sep = ";",
na.strings = "?",
colClassess = c("Date" = "character", "Time" = "character", "numeric")
dataFile = "C:\\Users\\Ognjen\\Documents\\Coursera\\Exploratory Data Analysis\\exdata-data-household_power_consumption\\household_power_consumption.txt";
consumption <- read.table(dataFile,
header = TRUE,
sep = ";",
na.strings = "?",
colClassess = c("Date" = "character", "Time" = "character", "numeric") )
dataFile = "C:\\Users\\Ognjen\\Documents\\Coursera\\Exploratory Data Analysis\\exdata-data-household_power_consumption\\household_power_consumption.txt";
consumption <- read.table(dataFile,
header = TRUE,
sep = ";",
na.strings = "?",
colClassess = c(Date = "character", Time = "character", "numeric") )
dataFile = "C:\\Users\\Ognjen\\Documents\\Coursera\\Exploratory Data Analysis\\exdata-data-household_power_consumption\\household_power_consumption.txt";
consumption <- read.table(dataFile,
header = TRUE,
sep = ";",
na.strings = "?",
colClassess = c(Date = "character", "numeric") )
dataFile = "C:\\Users\\Ognjen\\Documents\\Coursera\\Exploratory Data Analysis\\exdata-data-household_power_consumption\\household_power_consumption.txt";
consumption <- read.table(dataFile,
header = TRUE,
sep = ";",
na.strings = "?",
colClasses = c(rep("character",2), rep("numeric",7)) )
View(consumption)
sub <- consumption[1,]
sub
sub$Date + " " + sub$Time
cat(sub$Date, "")
cat(sub$Date, " ", sub$Time)
cat(sub$Date, sub$Time)
with(sub, strptime(cat(Date, Time)))
with(sub, strptime(cat(Date, Time), format="%d/%m/%Y %H:%M:%S"))
t <- with(sub, strptime(cat(Date, Time), format="%d/%m/%Y %H:%M:%S"))
t
t <- strptime(cat(sub$Date, sub$Time), format="%d/%m/%Y %H:%M:%S")
t
?strptime
cat(sub$Date, sub$Time)
t <- strptime(cat(sub$Date, sub$Time), format="%d/%m/%Y %H:%M:%S ")
t <- strptime(sub$Time, format="%H:%M:%S")
t
t <- strptime(cat(sub$Date, sub$Time), format="%d/%m/%Y%H:%M:%S ")
t <- strptime(cat(sub$Date, sub$Time), format="%d/%m/%Y %H:%M:%S ")
t <- strptime("16/12/2006 17:12:00", format="%d/%m/%Y %H:%M:%S")
t
x <-cat(sub$date, sub$time)
x
x <-cat(sub$Date, sub$Time)
x
sub$Date
sub$Time
sub <- consumption[1:5,]
cat(sub$Date, sub$Time)
do.call(paste, c(sub[c("Date", "Time")], sep=""))
do.call(paste, c(sub[c("Date", "Time")], sep=" "))
consumption$DateTime <- do.call(paste, c(consumption[c("Date", "Time")], sep=" "))
consumption$DateTime <- strptime(consumption$DateTime, format = "%d/%m/%Y %H:%M:%S")
View(consumption)
install.packages("kernlab")
data(spam)
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam = spam(trainIndicator)
trainSpam = spam[trainIndicator]
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
str(trainSpam)
head(trainSpam)
?hclust
?reformulate
setwd("~/GitHub/getdata_assessment1")
rm(list=ls())
features <- read.table('UCI\ HAR\ Dataset\features.txt')
features <- read.table('UCI\ HAR\ Dataset/features.txt')
features
names(features) <- c('column', 'name')
head(features)
activity_labels <- read.table('UCI\ HAR\ Dataset/activity_labels.txt', col.names=c('column','activity'))
activity_labels
features <- read.table('UCI\ HAR\ Dataset/features.txt', col.names =  c('column', 'name'))
activity_labels <- read.table('UCI\ HAR\ Dataset/activity_labels.txt', col.names=c('column','activity'))
X_train <- read.table('UCI\ HAR\ Dataset/train/X_train.txt')
setwd("~/GitHub/RepData_PeerAssessment1")
unzip('activity.zip')
read.csv('activity.csv')
activity <- read.csv('activity.csv')
rm(list=ls())
activity <- read.csv('activity.csv')
View(activity)
with(activity, hist(steps))
require(data.table)
activity <- data.table(activity)
daily.activity <- activity[,steps = sum(steps), by=date]
?data.table
daily.activity <- activity[,list(steps = sum(steps)), by=date]
View(daily.activity)
daily.activity <- activity[,list(steps = sum(steps, na.rm=T)), by=date]
View(daily.activity)
hist(daily.activity$steps)
hist(daily.activity$steps, breaks=10)
carpet(daily.activity$steps)
rug(daily.activity$steps)
Calculate the mean and median of daily steps
mean(daily.activity$steps)
median(daily.activity$steps)
?sprintf
with(daily.activity,
sprintf("The mean number of steps per day is %f.2 and the median is %d",
mean(steps),
median(steps) ) )
interval.activity <- activity[, list(mean(steps, na.rm=T)), by = interval]
View(interval.activity)
interval.activity <- activity[, list(avg.steps = mean(steps, na.rm=T)), by = interval]
with(interval.activity, plot(interval, avg.steps))
with(interval.activity, plot(interval, avg.steps, type="l"))
max(interval.activity)
?max
which.max(interval.activity)
which.max(interval.activity$steps)
which.max(1:2)
interval.activity$steps
which.max(interval.activity$avg.steps)
sprintf("The interval with most steps on average is %d",
interval.activity[which.max(interval.activity$avg.steps)])
sprintf("The interval with most steps on average is %.2f",
interval.activity[which.max(interval.activity$avg.steps)])
sprintf("The interval with most steps on average is %.2f",
interval.activity[which.max(interval.activity$avg.steps)])
interval.activity[which.max(interval.activity$avg.steps)]
sprintf("The interval with most steps on average is %.d",
interval.activity[which.max(interval.activity$avg.steps),1])
sprintf("The interval with most steps on average is %d",
interval.activity[which.max(interval.activity$avg.steps),1])
interval.activity[which.max(interval.activity$avg.steps),list(interval)])
sprintf("The interval with most steps on average is %d",
interval.activity[which.max(interval.activity$avg.steps),list(interval)])
interval.activity[which.max(interval.activity$avg.steps),interval])
sprintf("The interval with most steps on average is %d",
interval.activity[which.max(interval.activity$avg.steps),interval])
is.na(activity)
sum(is.na(activity))
nmis <- sum(is.na(activity))
sprintf("The number of missing values is %d", nmis)
imputed.activity <- merge(activity, interval.activity)
?merge
imputed.activity <- merge(activity, interval.activity,
by = interval)
head(activity)
head(interval.activity)
imputed.activity <- merge(activity, interval.activity,
by = c(interval))
imputed.activity <- merge(activity, interval.activity,
by = interval)
merge(activity, daily.activity)
setkey(activity, interval)
setkey(interval.activity, interval)
imputed.activity <- merge(activity, interval.activity)
setkey(interval.activity, interval)
imputed.activity <- merge(activity, interval.activity)
View(imputed.activity)
imputed.activity <- merge(activity, interval.activity, all.x=TRUE)
attach(imputed.activity)
imputed.activity$steps[is.na(steps)] <- avg.steps;
imputed.activity$steps[is.na(steps)] <- avg.steps[is.na(steps)];
avg.steps <- NULL
detach()
View(imputed.activity)
imputed.activity <- merge(activity, interval.activity, all.x=TRUE)
View(imputed.activity)
attach(imputed.activity)
imputed.activity$steps[is.na(steps)] <- avg.steps[is.na(steps)];
is.na(steps)
avg.steps[is.na(steps)]
avg.steps
attach(imputed.activity)
detach()
detach()
detach()
detach()
avg.steps
attach(imputed.activity)
avg.steps
imputed.activity$avg.steps
detach()
imputed.activity$steps[is.na(imputed.activity$steps)] <- imputed.activity$avg.steps[is.na(imputed.activity$steps)];
imputed.activity$avg.steps <- NULL
View(imputed.activity)
sum(is.na(imputed.activity))
daily.imputed.activity <- imputed.activity[,list(steps = sum(steps, na.rm=T)), by=date]
hist(daily.imputed.activity$steps, breaks=10)
rug(daily.imputed.activity$steps)
with(daily.imputed.activity,
sprintf("The mean number of steps per day is %.1f and the median is %d",
mean(steps),
median(steps) ) )
with(daily.imputed.activity,
sprintf("The mean number of steps per day is %.1f and the median is %.1f",
mean(steps),
median(steps) ) )
weekdays(today())
date()
weekdays(date())
as.Date(date())
Date()
weekdays("2012-02-01")
weekdays(as.Date("2012-02-01"))
?sapply
class(activity$date)
as.Date(activity$date)
activity$weekday <- lapply(as.Date(date), function(date) {if(weekdays(date) %in% c("Saturday", "Sunday"")){"Weekend"} else {"Weekday"}})
with(activity,
activity$weekday <- lapply(as.Date(date), function(date) {"Weekday"} ) )
View(activity)
lapply(as.Date(date), function(date) {"Weekday"} ) )
with(activity,
activity$weekday <- lapply(as.Date(date), function(date) {"Weekday"} ) )
lapply(as.Date(date), function(date) {"Weekday"} )
with(activity,
activity$weekday <- lapply(date, function(date) {"Weekday"} ) )
View(activity)
lapply(activity$date, function(date) {"Weekday"} )
sapply(activity$date, function(date) {"Weekday"} )
activity$weekday <- sapply(activity$date, function(date) {"Weekday"} )
View(activity)
activity <- read.csv('activity.csv')
as.Date(activity$date)
activity$daytype <- sapply(as.Date(activity$date), function(date) {weekday(date)} )
activity$daytype <- sapply(as.Date(activity$date), function(date) {weekdays(date)} )
View(activity)
activity$daytype <- sapply(as.Date(activity$date), function(date) {
if (weekdays(date) %in% c("Saturday", "Sunday")) "Weekend"
else "Weekday"
} )
View(activity)
class(activity$daytype)
activity$daytype <- as.factor(sapply(as.Date(activity$date), function(date) {
if (weekdays(date) %in% c("Saturday", "Sunday")) "Weekend"
else "Weekday"
} ) )
View(activity)
class(activity$daytype)
?plot
library(lattice)
with(activity, plot(interval ~ steps, daytype)
)
with(activity, plot(interval ~ steps, daytype, type = "l")
with(activity, plot(interval ~ steps, daytype, type = "l") )
with(activity, plot(interval ~ steps, daytype, type = "l") )
with(activity, plot(interval ~ steps, type = "l") )
with(activity, plot(steps ~ interval, type = "l") )
interval.wk.activity <- activity[, list(avg.steps = mean(steps)), by=c(daytype, interval)]
interval.wk.activity <- activity[, list(avg.steps = mean(steps)), by=list(daytype, interval)]
interval.wk.activity <- activity[, list(avg.steps = mean(steps)), by=daytype]
interval.wk.activity <- activity[, list(avg.steps = mean(steps)), by=date]
interval.wk.activity <- activity[, list(avg.steps = mean(steps, na.rm=T))
, by = interval]
View(activity)
interval.activity <- activity[, list(avg.steps = mean(steps, na.rm=T))
, by = interval]
interval.wk.activity <- activity[, list(avg.steps = mean(steps, na.rm=T))
, by = interval]
